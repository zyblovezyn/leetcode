class Solution {
    public static void main(String[] args) {
        int nums1[] = new int[2];
        nums1[0] = 1;
        nums1[1] = 3;
        int nums2[] = new int[1];
        nums2[0] = 2;
        findMedianSortedArrays(nums1, nums2);
    }

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int length = nums1.length + nums2.length;
        int mid1;
        int mid2;
        int midLength = length / 2;
        if (length % 2 == 0) {
            mid1 = midLength - 1;
            mid2 = midLength;
        } else {
            mid1 = midLength;
            mid2 = midLength;
        }

        int startIndexNum1 = 0;
        int startIndexNum2 = 0;
        int pre = 0;
        int next = 0;
        while (true) {
            pre = next;
            if (startIndexNum1 == nums1.length) {
                next = nums2[startIndexNum2++];
            }else if (startIndexNum2 == nums2.length) {
                next = nums1[startIndexNum1++];
            }else {
                if (nums1[startIndexNum1] >= nums2[startIndexNum2]) {
                    next = nums2[startIndexNum2++];
                } else {
                    next = nums1[startIndexNum1++];
                }
            }
            midLength--;
            if (midLength == -1) {
                break;
            }
        }

        if (mid1 == mid2) {
            System.out.println(next);
            return next;
        } else {
            System.out.println(((double) (pre + next)) / 2);
            return ((double) (pre + next)) / 2;
        }
    }
}

//runtime:14 ms
//memory:39.8 MB
